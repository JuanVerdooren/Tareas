{"ast":null,"code":"var _jsxFileName = \"/Users/margaritaolaya/Desktop/Juanky - Practica/frontend/src/context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [role, setRole] = useState(localStorage.getItem(\"role\"));\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      try {\n        const res = await fetch(\"http://localhost:5001/auth/user\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (res.ok) {\n          const data = await res.json();\n          setUser(data); // Establecer los datos del usuario\n          setRole(data.role); // Establecer el rol\n        } else {\n          logout(); // Si el token es inv치lido, cerrar sesi칩n\n        }\n      } catch {\n        logout(); // Si ocurre un error en la solicitud\n      } finally {\n        setLoading(false);\n      }\n    };\n    verifyToken();\n  }, [token]); // El useEffect depende del token\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    setToken(null);\n    setRole(null);\n    setUser(null); // Limpiar datos del usuario\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      role,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gzINvrRHEbVQOAMabfs8rErhlQs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","role","setRole","user","setUser","loading","setLoading","verifyToken","res","fetch","headers","Authorization","ok","data","json","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/margaritaolaya/Desktop/Juanky - Practica/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [role, setRole] = useState(localStorage.getItem(\"role\"));\n  const [user, setUser] = useState(null); \n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const res = await fetch(\"http://localhost:5001/auth/user\", {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (res.ok) {\n          const data = await res.json();\n          setUser(data); // Establecer los datos del usuario\n          setRole(data.role); // Establecer el rol\n        } else {\n          logout(); // Si el token es inv치lido, cerrar sesi칩n\n        }\n      } catch {\n        logout(); // Si ocurre un error en la solicitud\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    verifyToken();\n  }, [token]); // El useEffect depende del token\n\n \n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    setToken(null);\n    setRole(null);\n    setUser(null); // Limpiar datos del usuario\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, user, role, logout, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACU,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAACU,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAC9D,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMiB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI,CAACV,KAAK,EAAE;QACVS,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAI;QACF,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;UACzDC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUd,KAAK;UAAG;QAC9C,CAAC,CAAC;QAEF,IAAIW,GAAG,CAACI,EAAE,EAAE;UACV,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;UAC7BV,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC;UACfX,OAAO,CAACW,IAAI,CAACZ,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,MAAM;UACLc,MAAM,CAAC,CAAC,CAAC,CAAC;QACZ;MACF,CAAC,CAAC,MAAM;QACNA,MAAM,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC;;EAIb,MAAMkB,MAAM,GAAGA,CAAA,KAAM;IACnBhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAChCjB,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;IAC/BlB,QAAQ,CAAC,IAAI,CAAC;IACdI,OAAO,CAAC,IAAI,CAAC;IACbE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAErB,KAAK;MAAEM,IAAI;MAAEF,IAAI;MAAEc,MAAM;MAAEV;IAAQ,CAAE;IAAAV,QAAA,EACjEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1B,EAAA,CAlDWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAoDzB,OAAO,MAAM8B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMrC,UAAU,CAACK,WAAW,CAAC;AAAA;AAACgC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}